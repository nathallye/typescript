{"dependencies":[{"name":"jquery","loc":{"line":97,"column":23}}],"generated":{"js":"\"use strict\";\n// function soma(a: number, b: number) {\n//   return a + b;\n// }\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// soma(2, 3)\n// INTERFACES\n// interface IAnimal {\n//   nome: string;\n//   tipo: 'terrestre' | 'aquático';\n//   domestico: boolean;\n//   executarRugido(alturaEmDecibeis: number): void; // podemos implementar funções também\n// }\n// interface IFelino extends IAnimal { // forma de herança\n//   visaoNoturna: boolean;\n// }\n// interface ICanino extends IAnimal {\n//   porte: 'pequeno' | 'medio' | 'grande';\n// }\n// const animal: IAnimal = {\n//   nome: 'Elefante',\n//   tipo: 'terrestre',\n//   executarRugido: (alturaEmDecibeis) => (`${alturaEmDecibeis}dB`)\n// }\n// animal.executarRugido(50);\n// const felino: IFelino = {\n//   nome: 'Leão',\n//   tipo: 'terrestre',\n//   visaoNoturna: true,\n//   executarRugido: (alturaEmDecibeis) => (`${alturaEmDecibeis}dB`)\n// }\n// felino.executarRugido(50);\n// TYPES\n// type IDomestico = IFelino | ICanino; // Podemos definir uma ou outra interface, utilizando o types\n// const animal2: IDomestico = {\n//   domestico: true,\n//   nome: 'cachorro',\n//   porte: 'grande',\n//   tipo: 'terrestre'\n// }\n// TRATANDO A TAG INPUT\n// const input = document.getElementById('input') as HTMLInputElement; // informando ao typescript que esse elemento é do tipo input\n// input.addEventListener('input', (event) => {\n//   const i = event.currentTarget as HTMLInputElement;\n// });\n// GENERIC TYPES\n// function adicionaApendiceALista<T>(array: any[], valor: T) {\n//   return array.map(item => item + valor);\n// }\n// adicionaApendiceALista([1, 2, 3, 4], 6);\n// CONDICIONAIS A PARTIR DE PARÂMETROS \n// interface IUsuario {\n//   id: string;\n//   email: string;\n// }\n// interface IAdmin extends IUsuario {\n//   cargo: 'gerente' | 'coordenador' | 'supervisor'\n// }\n// function redirecione(usuario: IUsuario | IAdmin) {\n//   if ('cargo' in usuario) {\n//     // redirecionar para a área de admin\n//   }\n//   // redirecinar para a área do usuário\n// }\n// CARACTER \"?\" PARA VARIÁVEIS OPCIONAIS\n// interface IUsuario {\n//   id: string;\n//   email: string;\n//   cargo?: 'gerente' | 'coordenador' | 'supervisor' // valor que pode ou não está definido em IUsuário. Se estiver definifo, é um usuário admin\n// }\n// function redirecione(usuario: IUsuario) {\n//   if (usuario.cargo) { // se usuário tiver o atributo cargo\n//     // redirecionar para a área de admin\n//   }\n//   // redirecinar para a área do usuário\n// }\n// CRIANDO VARIÁVEIS COM PROPRIEDADE READONLY(SOMENTE LEITURA) & PRIVATE\n// interface Cachorro {\n//   nome: string;\n//   idade: number;\n//   parqueFavorito?: string; // valor de parqueFavorito que pode ou não está definido, variável opcional.\n// }\n// type CachorroSomenteLeitura = {\n//   +readonly [K in keyof Cachorro]-?: Cachorro[K]; // interando todos os itens e informando que esses valores vão ser somente de leitura\n//   // + adicionando o readony e - removendo os elementos opcionais dentro dessa classe\n// }\n// class MeuCachorro implements CachorroSomenteLeitura {\n//   idade;\n//   nome;\n//   parqueFavorito;\n//   constructor(nome, idade) {\n//     this.nome = nome;\n//     this.idade = idade;\n//   }\n// }\n// const cao = new MeuCachorro('Apolo', 12);\nvar jquery_1 = require(\"jquery\");\njquery_1.default.fn.extend({\n    novaFuncao: function () {\n        console.log('Chamou a nova função.');\n    }\n});\n"},"hash":"e4e6d45d888083b3659cb72b20b196d6"}